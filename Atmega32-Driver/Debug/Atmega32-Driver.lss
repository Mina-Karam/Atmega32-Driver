
Atmega32-Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000982  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800060  00800060  000009f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001da6  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c54  00000000  00000000  0000296a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f31  00000000  00000000  000035be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  000044f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008be  00000000  00000000  00004820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000940  00000000  00000000  000050de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005a1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_12>
  34:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__vector_13>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 92 04 	jmp	0x924	; 0x924 <__vector_15>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	af 00       	.word	0x00af	; ????
  56:	e0 00       	.word	0x00e0	; ????
  58:	11 01       	movw	r2, r2
  5a:	42 01       	movw	r8, r4
  5c:	73 01       	movw	r14, r6
  5e:	a4 01       	movw	r20, r8
  60:	d5 01       	movw	r26, r10
  62:	06 02       	muls	r16, r22
  64:	37 02       	muls	r19, r23
  66:	61 02       	muls	r22, r17
  68:	6d 02       	muls	r22, r29
  6a:	79 02       	muls	r23, r25
  6c:	85 02       	muls	r24, r21
  6e:	91 02       	muls	r25, r17
  70:	9d 02       	muls	r25, r29
  72:	a9 02       	muls	r26, r25
  74:	b5 02       	muls	r27, r21

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a6 38       	cpi	r26, 0x86	; 134
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  96:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <USART_CallBack>:


static void USART_CallBack(void)
{
	#ifdef MCU_Act_As_Master
	MCAL_UART_ReceiveData(USART_disable);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(data, USART_enable);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <data>
  aa:	0e 94 4d 04 	call	0x89a	; 0x89a <MCAL_UART_SendData>

	/* ========= Send Data To SPI1 =========== */

	/* Slave Selection (Low), to listen  */
	MCAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	64 e0       	ldi	r22, 0x04	; 4
  b2:	86 e3       	ldi	r24, 0x36	; 54
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <MCAL_GPIO_WritePin>

	/* Send & Receive data */
	MCAL_SPI_TX_RX(&data, SPI_enable);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	82 e8       	ldi	r24, 0x82	; 130
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 4b 03 	call	0x696	; 0x696 <MCAL_SPI_TX_RX>

	/* Slave Selection (High) idle mode */
	MCAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	86 e3       	ldi	r24, 0x36	; 54
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <MCAL_GPIO_WritePin>
  d0:	08 95       	ret

000000d2 <SPI_Test>:
/* ========== Prototypes ========= */
static void USART_CallBack(void);

/* =========== Main Program ========== */
void SPI_Test(void)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	62 97       	sbiw	r28, 0x12	; 18
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61

	/* Configuration of USART1 */
	USART_Config_t USART_Config;

	USART_Config.USART_Baudrate = USART_BAUD_RATE_115200;
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	8a 83       	std	Y+2, r24	; 0x02
	USART_Config.USART_IRQ_Enable = USART_IRQ_RXCIE;
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	9e 83       	std	Y+6, r25	; 0x06
	USART_Config.P_IRQ_CallBack = USART_CallBack;
  ee:	2f e4       	ldi	r18, 0x4F	; 79
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	38 87       	std	Y+8, r19	; 0x08
  f4:	2f 83       	std	Y+7, r18	; 0x07
	USART_Config.USART_Paritybit = USART_NO_PARITY;
  f6:	1c 82       	std	Y+4, r1	; 0x04
	USART_Config.USART_Databits = USART_8_DATA_BITS;
  f8:	8b 83       	std	Y+3, r24	; 0x03
	USART_Config.USART_Stopbits = USART_1_STOP_BIT;
  fa:	1d 82       	std	Y+5, r1	; 0x05
	USART_Config.USART_Mode = USART_MODE_ASYNC;
  fc:	19 82       	std	Y+1, r1	; 0x01

	MCAL_USART_Init(&USART_Config);
  fe:	ce 01       	movw	r24, r28
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	0e 94 82 03 	call	0x704	; 0x704 <MCAL_USART_Init>

	/* Configuration of SPI1 */
	SPI_Config_t SPI_Config;

	/* Common Configuration */
	SPI_Config.BaudRate_Prescaler = BAUDERATE_PRESCALER_4;
 106:	1f 86       	std	Y+15, r1	; 0x0f
	SPI_Config.CLK_Phase = CLK_PHASE_SAMPLE_SETUP;
 108:	1d 86       	std	Y+13, r1	; 0x0d
	SPI_Config.CLK_Polarity = CLK_POLARITY_RISING_FALLING;
 10a:	1c 86       	std	Y+12, r1	; 0x0c
	SPI_Config.Frame_Format = FRAME_FORMAT_MSB_FIRST;
 10c:	1b 86       	std	Y+11, r1	; 0x0b
	SPI_Config.Communication_Mode = COMMUNICATION_MODE_FULL_DUPLEX;
 10e:	1a 86       	std	Y+10, r1	; 0x0a

	#ifdef MCU_Act_As_Master
	SPI_Config.SPI_Mode = SPI_MODE_MASTER;
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	89 87       	std	Y+9, r24	; 0x09
	SPI_Config.IRQ_Enable = IRQ_ENABLE_NONE;
 114:	18 8a       	std	Y+16, r1	; 0x10
	SPI_Config.P_IRQ_CallBack = NULL;
 116:	1a 8a       	std	Y+18, r1	; 0x12
 118:	19 8a       	std	Y+17, r1	; 0x11

	#endif

	MCAL_SPI_Init(&SPI_Config);
 11a:	ce 01       	movw	r24, r28
 11c:	09 96       	adiw	r24, 0x09	; 9
 11e:	0e 94 c3 02 	call	0x586	; 0x586 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins();
 122:	0e 94 e5 02 	call	0x5ca	; 0x5ca <MCAL_SPI_GPIO_Set_Pins>

	/* Set Idle High (Active High) */
	MCAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	64 e0       	ldi	r22, 0x04	; 4
 12a:	86 e3       	ldi	r24, 0x36	; 54
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <MCAL_GPIO_WritePin>
 132:	ff cf       	rjmp	.-2      	; 0x132 <SPI_Test+0x60>

00000134 <main>:

#include "atmega32_SPI_Test.h"

int main(void)
{
   SPI_Test();
 134:	0e 94 69 00 	call	0xd2	; 0xd2 <SPI_Test>
}
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <MCAL_GPIO_Init>:
uint8 MCAL_GPIO_ReadPort(GPIO_Typedef_t *GPIOx)
{
	uint8 PortState = 0x00;
	PortState = ((uint8)(GPIOx->PIN.PIN));
	return PortState;
}
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	dc 01       	movw	r26, r24
 144:	eb 01       	movw	r28, r22
 146:	e8 81       	ld	r30, Y
 148:	4e 2f       	mov	r20, r30
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	49 30       	cpi	r20, 0x09	; 9
 14e:	51 05       	cpc	r21, r1
 150:	08 f0       	brcs	.+2      	; 0x154 <MCAL_GPIO_Init+0x16>
 152:	a7 c1       	rjmp	.+846    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 154:	fa 01       	movw	r30, r20
 156:	e6 5d       	subi	r30, 0xD6	; 214
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	0c 94 b9 04 	jmp	0x972	; 0x972 <__tablejump2__>
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	91 f0       	breq	.+36     	; 0x188 <MCAL_GPIO_Init+0x4a>
 164:	18 f0       	brcs	.+6      	; 0x16c <MCAL_GPIO_Init+0x2e>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	e9 f0       	breq	.+58     	; 0x1a4 <MCAL_GPIO_Init+0x66>
 16a:	9b c1       	rjmp	.+822    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 16c:	11 96       	adiw	r26, 0x01	; 1
 16e:	8c 91       	ld	r24, X
 170:	11 97       	sbiw	r26, 0x01	; 1
 172:	8e 7f       	andi	r24, 0xFE	; 254
 174:	11 96       	adiw	r26, 0x01	; 1
 176:	8c 93       	st	X, r24
 178:	11 97       	sbiw	r26, 0x01	; 1
 17a:	12 96       	adiw	r26, 0x02	; 2
 17c:	8c 91       	ld	r24, X
 17e:	12 97       	sbiw	r26, 0x02	; 2
 180:	8e 7f       	andi	r24, 0xFE	; 254
 182:	12 96       	adiw	r26, 0x02	; 2
 184:	8c 93       	st	X, r24
 186:	8d c1       	rjmp	.+794    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 188:	11 96       	adiw	r26, 0x01	; 1
 18a:	8c 91       	ld	r24, X
 18c:	11 97       	sbiw	r26, 0x01	; 1
 18e:	8e 7f       	andi	r24, 0xFE	; 254
 190:	11 96       	adiw	r26, 0x01	; 1
 192:	8c 93       	st	X, r24
 194:	11 97       	sbiw	r26, 0x01	; 1
 196:	12 96       	adiw	r26, 0x02	; 2
 198:	8c 91       	ld	r24, X
 19a:	12 97       	sbiw	r26, 0x02	; 2
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	8c 93       	st	X, r24
 1a2:	7f c1       	rjmp	.+766    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	8c 91       	ld	r24, X
 1a8:	11 97       	sbiw	r26, 0x01	; 1
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	11 96       	adiw	r26, 0x01	; 1
 1ae:	8c 93       	st	X, r24
 1b0:	11 97       	sbiw	r26, 0x01	; 1
 1b2:	12 96       	adiw	r26, 0x02	; 2
 1b4:	8c 91       	ld	r24, X
 1b6:	12 97       	sbiw	r26, 0x02	; 2
 1b8:	8e 7f       	andi	r24, 0xFE	; 254
 1ba:	12 96       	adiw	r26, 0x02	; 2
 1bc:	8c 93       	st	X, r24
 1be:	71 c1       	rjmp	.+738    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	91 f0       	breq	.+36     	; 0x1ea <MCAL_GPIO_Init+0xac>
 1c6:	18 f0       	brcs	.+6      	; 0x1ce <MCAL_GPIO_Init+0x90>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	e9 f0       	breq	.+58     	; 0x206 <MCAL_GPIO_Init+0xc8>
 1cc:	6a c1       	rjmp	.+724    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 1ce:	11 96       	adiw	r26, 0x01	; 1
 1d0:	8c 91       	ld	r24, X
 1d2:	11 97       	sbiw	r26, 0x01	; 1
 1d4:	8d 7f       	andi	r24, 0xFD	; 253
 1d6:	11 96       	adiw	r26, 0x01	; 1
 1d8:	8c 93       	st	X, r24
 1da:	11 97       	sbiw	r26, 0x01	; 1
 1dc:	12 96       	adiw	r26, 0x02	; 2
 1de:	8c 91       	ld	r24, X
 1e0:	12 97       	sbiw	r26, 0x02	; 2
 1e2:	8d 7f       	andi	r24, 0xFD	; 253
 1e4:	12 96       	adiw	r26, 0x02	; 2
 1e6:	8c 93       	st	X, r24
 1e8:	5c c1       	rjmp	.+696    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 1ea:	11 96       	adiw	r26, 0x01	; 1
 1ec:	8c 91       	ld	r24, X
 1ee:	11 97       	sbiw	r26, 0x01	; 1
 1f0:	8d 7f       	andi	r24, 0xFD	; 253
 1f2:	11 96       	adiw	r26, 0x01	; 1
 1f4:	8c 93       	st	X, r24
 1f6:	11 97       	sbiw	r26, 0x01	; 1
 1f8:	12 96       	adiw	r26, 0x02	; 2
 1fa:	8c 91       	ld	r24, X
 1fc:	12 97       	sbiw	r26, 0x02	; 2
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	12 96       	adiw	r26, 0x02	; 2
 202:	8c 93       	st	X, r24
 204:	4e c1       	rjmp	.+668    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 206:	11 96       	adiw	r26, 0x01	; 1
 208:	8c 91       	ld	r24, X
 20a:	11 97       	sbiw	r26, 0x01	; 1
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	11 96       	adiw	r26, 0x01	; 1
 210:	8c 93       	st	X, r24
 212:	11 97       	sbiw	r26, 0x01	; 1
 214:	12 96       	adiw	r26, 0x02	; 2
 216:	8c 91       	ld	r24, X
 218:	12 97       	sbiw	r26, 0x02	; 2
 21a:	8d 7f       	andi	r24, 0xFD	; 253
 21c:	12 96       	adiw	r26, 0x02	; 2
 21e:	8c 93       	st	X, r24
 220:	40 c1       	rjmp	.+640    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	91 f0       	breq	.+36     	; 0x24c <MCAL_GPIO_Init+0x10e>
 228:	18 f0       	brcs	.+6      	; 0x230 <MCAL_GPIO_Init+0xf2>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	e9 f0       	breq	.+58     	; 0x268 <MCAL_GPIO_Init+0x12a>
 22e:	39 c1       	rjmp	.+626    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 230:	11 96       	adiw	r26, 0x01	; 1
 232:	8c 91       	ld	r24, X
 234:	11 97       	sbiw	r26, 0x01	; 1
 236:	8b 7f       	andi	r24, 0xFB	; 251
 238:	11 96       	adiw	r26, 0x01	; 1
 23a:	8c 93       	st	X, r24
 23c:	11 97       	sbiw	r26, 0x01	; 1
 23e:	12 96       	adiw	r26, 0x02	; 2
 240:	8c 91       	ld	r24, X
 242:	12 97       	sbiw	r26, 0x02	; 2
 244:	8b 7f       	andi	r24, 0xFB	; 251
 246:	12 96       	adiw	r26, 0x02	; 2
 248:	8c 93       	st	X, r24
 24a:	2b c1       	rjmp	.+598    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 24c:	11 96       	adiw	r26, 0x01	; 1
 24e:	8c 91       	ld	r24, X
 250:	11 97       	sbiw	r26, 0x01	; 1
 252:	8b 7f       	andi	r24, 0xFB	; 251
 254:	11 96       	adiw	r26, 0x01	; 1
 256:	8c 93       	st	X, r24
 258:	11 97       	sbiw	r26, 0x01	; 1
 25a:	12 96       	adiw	r26, 0x02	; 2
 25c:	8c 91       	ld	r24, X
 25e:	12 97       	sbiw	r26, 0x02	; 2
 260:	84 60       	ori	r24, 0x04	; 4
 262:	12 96       	adiw	r26, 0x02	; 2
 264:	8c 93       	st	X, r24
 266:	1d c1       	rjmp	.+570    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 268:	11 96       	adiw	r26, 0x01	; 1
 26a:	8c 91       	ld	r24, X
 26c:	11 97       	sbiw	r26, 0x01	; 1
 26e:	84 60       	ori	r24, 0x04	; 4
 270:	11 96       	adiw	r26, 0x01	; 1
 272:	8c 93       	st	X, r24
 274:	11 97       	sbiw	r26, 0x01	; 1
 276:	12 96       	adiw	r26, 0x02	; 2
 278:	8c 91       	ld	r24, X
 27a:	12 97       	sbiw	r26, 0x02	; 2
 27c:	8b 7f       	andi	r24, 0xFB	; 251
 27e:	12 96       	adiw	r26, 0x02	; 2
 280:	8c 93       	st	X, r24
 282:	0f c1       	rjmp	.+542    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	91 f0       	breq	.+36     	; 0x2ae <MCAL_GPIO_Init+0x170>
 28a:	18 f0       	brcs	.+6      	; 0x292 <MCAL_GPIO_Init+0x154>
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	e9 f0       	breq	.+58     	; 0x2ca <MCAL_GPIO_Init+0x18c>
 290:	08 c1       	rjmp	.+528    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 292:	11 96       	adiw	r26, 0x01	; 1
 294:	8c 91       	ld	r24, X
 296:	11 97       	sbiw	r26, 0x01	; 1
 298:	87 7f       	andi	r24, 0xF7	; 247
 29a:	11 96       	adiw	r26, 0x01	; 1
 29c:	8c 93       	st	X, r24
 29e:	11 97       	sbiw	r26, 0x01	; 1
 2a0:	12 96       	adiw	r26, 0x02	; 2
 2a2:	8c 91       	ld	r24, X
 2a4:	12 97       	sbiw	r26, 0x02	; 2
 2a6:	87 7f       	andi	r24, 0xF7	; 247
 2a8:	12 96       	adiw	r26, 0x02	; 2
 2aa:	8c 93       	st	X, r24
 2ac:	fa c0       	rjmp	.+500    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 2ae:	11 96       	adiw	r26, 0x01	; 1
 2b0:	8c 91       	ld	r24, X
 2b2:	11 97       	sbiw	r26, 0x01	; 1
 2b4:	87 7f       	andi	r24, 0xF7	; 247
 2b6:	11 96       	adiw	r26, 0x01	; 1
 2b8:	8c 93       	st	X, r24
 2ba:	11 97       	sbiw	r26, 0x01	; 1
 2bc:	12 96       	adiw	r26, 0x02	; 2
 2be:	8c 91       	ld	r24, X
 2c0:	12 97       	sbiw	r26, 0x02	; 2
 2c2:	88 60       	ori	r24, 0x08	; 8
 2c4:	12 96       	adiw	r26, 0x02	; 2
 2c6:	8c 93       	st	X, r24
 2c8:	ec c0       	rjmp	.+472    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 2ca:	11 96       	adiw	r26, 0x01	; 1
 2cc:	8c 91       	ld	r24, X
 2ce:	11 97       	sbiw	r26, 0x01	; 1
 2d0:	88 60       	ori	r24, 0x08	; 8
 2d2:	11 96       	adiw	r26, 0x01	; 1
 2d4:	8c 93       	st	X, r24
 2d6:	11 97       	sbiw	r26, 0x01	; 1
 2d8:	12 96       	adiw	r26, 0x02	; 2
 2da:	8c 91       	ld	r24, X
 2dc:	12 97       	sbiw	r26, 0x02	; 2
 2de:	87 7f       	andi	r24, 0xF7	; 247
 2e0:	12 96       	adiw	r26, 0x02	; 2
 2e2:	8c 93       	st	X, r24
 2e4:	de c0       	rjmp	.+444    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 2e6:	89 81       	ldd	r24, Y+1	; 0x01
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	91 f0       	breq	.+36     	; 0x310 <MCAL_GPIO_Init+0x1d2>
 2ec:	18 f0       	brcs	.+6      	; 0x2f4 <MCAL_GPIO_Init+0x1b6>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	e9 f0       	breq	.+58     	; 0x32c <MCAL_GPIO_Init+0x1ee>
 2f2:	d7 c0       	rjmp	.+430    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 2f4:	11 96       	adiw	r26, 0x01	; 1
 2f6:	8c 91       	ld	r24, X
 2f8:	11 97       	sbiw	r26, 0x01	; 1
 2fa:	8f 7e       	andi	r24, 0xEF	; 239
 2fc:	11 96       	adiw	r26, 0x01	; 1
 2fe:	8c 93       	st	X, r24
 300:	11 97       	sbiw	r26, 0x01	; 1
 302:	12 96       	adiw	r26, 0x02	; 2
 304:	8c 91       	ld	r24, X
 306:	12 97       	sbiw	r26, 0x02	; 2
 308:	8f 7e       	andi	r24, 0xEF	; 239
 30a:	12 96       	adiw	r26, 0x02	; 2
 30c:	8c 93       	st	X, r24
 30e:	c9 c0       	rjmp	.+402    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 310:	11 96       	adiw	r26, 0x01	; 1
 312:	8c 91       	ld	r24, X
 314:	11 97       	sbiw	r26, 0x01	; 1
 316:	8f 7e       	andi	r24, 0xEF	; 239
 318:	11 96       	adiw	r26, 0x01	; 1
 31a:	8c 93       	st	X, r24
 31c:	11 97       	sbiw	r26, 0x01	; 1
 31e:	12 96       	adiw	r26, 0x02	; 2
 320:	8c 91       	ld	r24, X
 322:	12 97       	sbiw	r26, 0x02	; 2
 324:	80 61       	ori	r24, 0x10	; 16
 326:	12 96       	adiw	r26, 0x02	; 2
 328:	8c 93       	st	X, r24
 32a:	bb c0       	rjmp	.+374    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 32c:	11 96       	adiw	r26, 0x01	; 1
 32e:	8c 91       	ld	r24, X
 330:	11 97       	sbiw	r26, 0x01	; 1
 332:	80 61       	ori	r24, 0x10	; 16
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	8c 93       	st	X, r24
 338:	11 97       	sbiw	r26, 0x01	; 1
 33a:	12 96       	adiw	r26, 0x02	; 2
 33c:	8c 91       	ld	r24, X
 33e:	12 97       	sbiw	r26, 0x02	; 2
 340:	8f 7e       	andi	r24, 0xEF	; 239
 342:	12 96       	adiw	r26, 0x02	; 2
 344:	8c 93       	st	X, r24
 346:	ad c0       	rjmp	.+346    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	91 f0       	breq	.+36     	; 0x372 <MCAL_GPIO_Init+0x234>
 34e:	18 f0       	brcs	.+6      	; 0x356 <MCAL_GPIO_Init+0x218>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	e9 f0       	breq	.+58     	; 0x38e <MCAL_GPIO_Init+0x250>
 354:	a6 c0       	rjmp	.+332    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 356:	11 96       	adiw	r26, 0x01	; 1
 358:	8c 91       	ld	r24, X
 35a:	11 97       	sbiw	r26, 0x01	; 1
 35c:	8f 7d       	andi	r24, 0xDF	; 223
 35e:	11 96       	adiw	r26, 0x01	; 1
 360:	8c 93       	st	X, r24
 362:	11 97       	sbiw	r26, 0x01	; 1
 364:	12 96       	adiw	r26, 0x02	; 2
 366:	8c 91       	ld	r24, X
 368:	12 97       	sbiw	r26, 0x02	; 2
 36a:	8f 7d       	andi	r24, 0xDF	; 223
 36c:	12 96       	adiw	r26, 0x02	; 2
 36e:	8c 93       	st	X, r24
 370:	98 c0       	rjmp	.+304    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 372:	11 96       	adiw	r26, 0x01	; 1
 374:	8c 91       	ld	r24, X
 376:	11 97       	sbiw	r26, 0x01	; 1
 378:	8f 7d       	andi	r24, 0xDF	; 223
 37a:	11 96       	adiw	r26, 0x01	; 1
 37c:	8c 93       	st	X, r24
 37e:	11 97       	sbiw	r26, 0x01	; 1
 380:	12 96       	adiw	r26, 0x02	; 2
 382:	8c 91       	ld	r24, X
 384:	12 97       	sbiw	r26, 0x02	; 2
 386:	80 62       	ori	r24, 0x20	; 32
 388:	12 96       	adiw	r26, 0x02	; 2
 38a:	8c 93       	st	X, r24
 38c:	8a c0       	rjmp	.+276    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 38e:	11 96       	adiw	r26, 0x01	; 1
 390:	8c 91       	ld	r24, X
 392:	11 97       	sbiw	r26, 0x01	; 1
 394:	80 62       	ori	r24, 0x20	; 32
 396:	11 96       	adiw	r26, 0x01	; 1
 398:	8c 93       	st	X, r24
 39a:	11 97       	sbiw	r26, 0x01	; 1
 39c:	12 96       	adiw	r26, 0x02	; 2
 39e:	8c 91       	ld	r24, X
 3a0:	12 97       	sbiw	r26, 0x02	; 2
 3a2:	8f 7d       	andi	r24, 0xDF	; 223
 3a4:	12 96       	adiw	r26, 0x02	; 2
 3a6:	8c 93       	st	X, r24
 3a8:	7c c0       	rjmp	.+248    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	91 f0       	breq	.+36     	; 0x3d4 <MCAL_GPIO_Init+0x296>
 3b0:	18 f0       	brcs	.+6      	; 0x3b8 <MCAL_GPIO_Init+0x27a>
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	e9 f0       	breq	.+58     	; 0x3f0 <MCAL_GPIO_Init+0x2b2>
 3b6:	75 c0       	rjmp	.+234    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3b8:	11 96       	adiw	r26, 0x01	; 1
 3ba:	8c 91       	ld	r24, X
 3bc:	11 97       	sbiw	r26, 0x01	; 1
 3be:	8f 7b       	andi	r24, 0xBF	; 191
 3c0:	11 96       	adiw	r26, 0x01	; 1
 3c2:	8c 93       	st	X, r24
 3c4:	11 97       	sbiw	r26, 0x01	; 1
 3c6:	12 96       	adiw	r26, 0x02	; 2
 3c8:	8c 91       	ld	r24, X
 3ca:	12 97       	sbiw	r26, 0x02	; 2
 3cc:	8f 7b       	andi	r24, 0xBF	; 191
 3ce:	12 96       	adiw	r26, 0x02	; 2
 3d0:	8c 93       	st	X, r24
 3d2:	67 c0       	rjmp	.+206    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3d4:	11 96       	adiw	r26, 0x01	; 1
 3d6:	8c 91       	ld	r24, X
 3d8:	11 97       	sbiw	r26, 0x01	; 1
 3da:	8f 7b       	andi	r24, 0xBF	; 191
 3dc:	11 96       	adiw	r26, 0x01	; 1
 3de:	8c 93       	st	X, r24
 3e0:	11 97       	sbiw	r26, 0x01	; 1
 3e2:	12 96       	adiw	r26, 0x02	; 2
 3e4:	8c 91       	ld	r24, X
 3e6:	12 97       	sbiw	r26, 0x02	; 2
 3e8:	80 64       	ori	r24, 0x40	; 64
 3ea:	12 96       	adiw	r26, 0x02	; 2
 3ec:	8c 93       	st	X, r24
 3ee:	59 c0       	rjmp	.+178    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3f0:	11 96       	adiw	r26, 0x01	; 1
 3f2:	8c 91       	ld	r24, X
 3f4:	11 97       	sbiw	r26, 0x01	; 1
 3f6:	80 64       	ori	r24, 0x40	; 64
 3f8:	11 96       	adiw	r26, 0x01	; 1
 3fa:	8c 93       	st	X, r24
 3fc:	11 97       	sbiw	r26, 0x01	; 1
 3fe:	12 96       	adiw	r26, 0x02	; 2
 400:	8c 91       	ld	r24, X
 402:	12 97       	sbiw	r26, 0x02	; 2
 404:	8f 7b       	andi	r24, 0xBF	; 191
 406:	12 96       	adiw	r26, 0x02	; 2
 408:	8c 93       	st	X, r24
 40a:	4b c0       	rjmp	.+150    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	91 f0       	breq	.+36     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 412:	18 f0       	brcs	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	e9 f0       	breq	.+58     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 418:	44 c0       	rjmp	.+136    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 41a:	11 96       	adiw	r26, 0x01	; 1
 41c:	8c 91       	ld	r24, X
 41e:	11 97       	sbiw	r26, 0x01	; 1
 420:	8f 77       	andi	r24, 0x7F	; 127
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	8c 93       	st	X, r24
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	12 96       	adiw	r26, 0x02	; 2
 42a:	8c 91       	ld	r24, X
 42c:	12 97       	sbiw	r26, 0x02	; 2
 42e:	8f 77       	andi	r24, 0x7F	; 127
 430:	12 96       	adiw	r26, 0x02	; 2
 432:	8c 93       	st	X, r24
 434:	36 c0       	rjmp	.+108    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 436:	11 96       	adiw	r26, 0x01	; 1
 438:	8c 91       	ld	r24, X
 43a:	11 97       	sbiw	r26, 0x01	; 1
 43c:	8f 77       	andi	r24, 0x7F	; 127
 43e:	11 96       	adiw	r26, 0x01	; 1
 440:	8c 93       	st	X, r24
 442:	11 97       	sbiw	r26, 0x01	; 1
 444:	12 96       	adiw	r26, 0x02	; 2
 446:	8c 91       	ld	r24, X
 448:	12 97       	sbiw	r26, 0x02	; 2
 44a:	80 68       	ori	r24, 0x80	; 128
 44c:	12 96       	adiw	r26, 0x02	; 2
 44e:	8c 93       	st	X, r24
 450:	28 c0       	rjmp	.+80     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 452:	11 96       	adiw	r26, 0x01	; 1
 454:	8c 91       	ld	r24, X
 456:	11 97       	sbiw	r26, 0x01	; 1
 458:	80 68       	ori	r24, 0x80	; 128
 45a:	11 96       	adiw	r26, 0x01	; 1
 45c:	8c 93       	st	X, r24
 45e:	11 97       	sbiw	r26, 0x01	; 1
 460:	12 96       	adiw	r26, 0x02	; 2
 462:	8c 91       	ld	r24, X
 464:	12 97       	sbiw	r26, 0x02	; 2
 466:	8f 77       	andi	r24, 0x7F	; 127
 468:	12 96       	adiw	r26, 0x02	; 2
 46a:	8c 93       	st	X, r24
 46c:	1a c0       	rjmp	.+52     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	51 f0       	breq	.+20     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 474:	18 f0       	brcs	.+6      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 476:	82 30       	cpi	r24, 0x02	; 2
 478:	71 f0       	breq	.+28     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 47a:	13 c0       	rjmp	.+38     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 47c:	11 96       	adiw	r26, 0x01	; 1
 47e:	1c 92       	st	X, r1
 480:	11 97       	sbiw	r26, 0x01	; 1
 482:	12 96       	adiw	r26, 0x02	; 2
 484:	1c 92       	st	X, r1
 486:	0d c0       	rjmp	.+26     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 488:	11 96       	adiw	r26, 0x01	; 1
 48a:	1c 92       	st	X, r1
 48c:	11 97       	sbiw	r26, 0x01	; 1
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	12 96       	adiw	r26, 0x02	; 2
 492:	8c 93       	st	X, r24
 494:	06 c0       	rjmp	.+12     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	11 96       	adiw	r26, 0x01	; 1
 49a:	8c 93       	st	X, r24
 49c:	11 97       	sbiw	r26, 0x01	; 1
 49e:	12 96       	adiw	r26, 0x02	; 2
 4a0:	1c 92       	st	X, r1
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <MCAL_GPIO_WritePin>:
 * @param [in]  -Value: Specifies one of @ref GPIO_PIN_STATE to be written.
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_Typedef_t *GPIOx,uint8 PinNumber,uint8 Value)
{
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
	switch(PinNumber)
 4ac:	06 2f       	mov	r16, r22
 4ae:	10 e0       	ldi	r17, 0x00	; 0
 4b0:	08 30       	cpi	r16, 0x08	; 8
 4b2:	11 05       	cpc	r17, r1
 4b4:	08 f0       	brcs	.+2      	; 0x4b8 <MCAL_GPIO_WritePin+0x10>
 4b6:	64 c0       	rjmp	.+200    	; 0x580 <MCAL_GPIO_WritePin+0xd8>
 4b8:	f8 01       	movw	r30, r16
 4ba:	ed 5c       	subi	r30, 0xCD	; 205
 4bc:	ff 4f       	sbci	r31, 0xFF	; 255
 4be:	0c 94 b9 04 	jmp	0x972	; 0x972 <__tablejump2__>
	{
		case GPIO_PIN_0:
		{
			if(Value)
 4c2:	44 23       	and	r20, r20
 4c4:	29 f0       	breq	.+10     	; 0x4d0 <MCAL_GPIO_WritePin+0x28>
				GPIOx->PORT.bits.PORT0 = GPIO_PIN_HIGH;
 4c6:	fc 01       	movw	r30, r24
 4c8:	22 81       	ldd	r18, Z+2	; 0x02
 4ca:	21 60       	ori	r18, 0x01	; 1
 4cc:	22 83       	std	Z+2, r18	; 0x02
 4ce:	58 c0       	rjmp	.+176    	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT0 = GPIO_PIN_LOW;
 4d0:	fc 01       	movw	r30, r24
 4d2:	22 81       	ldd	r18, Z+2	; 0x02
 4d4:	2e 7f       	andi	r18, 0xFE	; 254
 4d6:	22 83       	std	Z+2, r18	; 0x02
 4d8:	53 c0       	rjmp	.+166    	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_1:
		{
			if(Value)
 4da:	44 23       	and	r20, r20
 4dc:	29 f0       	breq	.+10     	; 0x4e8 <MCAL_GPIO_WritePin+0x40>
				GPIOx->PORT.bits.PORT1 = GPIO_PIN_HIGH;
 4de:	fc 01       	movw	r30, r24
 4e0:	22 81       	ldd	r18, Z+2	; 0x02
 4e2:	22 60       	ori	r18, 0x02	; 2
 4e4:	22 83       	std	Z+2, r18	; 0x02
 4e6:	4c c0       	rjmp	.+152    	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT1 = GPIO_PIN_LOW;
 4e8:	fc 01       	movw	r30, r24
 4ea:	22 81       	ldd	r18, Z+2	; 0x02
 4ec:	2d 7f       	andi	r18, 0xFD	; 253
 4ee:	22 83       	std	Z+2, r18	; 0x02
 4f0:	47 c0       	rjmp	.+142    	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_2:
		{
			if(Value)
 4f2:	44 23       	and	r20, r20
 4f4:	29 f0       	breq	.+10     	; 0x500 <MCAL_GPIO_WritePin+0x58>
				GPIOx->PORT.bits.PORT2 = GPIO_PIN_HIGH;
 4f6:	fc 01       	movw	r30, r24
 4f8:	22 81       	ldd	r18, Z+2	; 0x02
 4fa:	24 60       	ori	r18, 0x04	; 4
 4fc:	22 83       	std	Z+2, r18	; 0x02
 4fe:	40 c0       	rjmp	.+128    	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT2 = GPIO_PIN_LOW;
 500:	fc 01       	movw	r30, r24
 502:	22 81       	ldd	r18, Z+2	; 0x02
 504:	2b 7f       	andi	r18, 0xFB	; 251
 506:	22 83       	std	Z+2, r18	; 0x02
 508:	3b c0       	rjmp	.+118    	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_3:
		{
			if(Value)
 50a:	44 23       	and	r20, r20
 50c:	29 f0       	breq	.+10     	; 0x518 <MCAL_GPIO_WritePin+0x70>
				GPIOx->PORT.bits.PORT3 = GPIO_PIN_HIGH;
 50e:	fc 01       	movw	r30, r24
 510:	22 81       	ldd	r18, Z+2	; 0x02
 512:	28 60       	ori	r18, 0x08	; 8
 514:	22 83       	std	Z+2, r18	; 0x02
 516:	34 c0       	rjmp	.+104    	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT3 = GPIO_PIN_LOW;
 518:	fc 01       	movw	r30, r24
 51a:	22 81       	ldd	r18, Z+2	; 0x02
 51c:	27 7f       	andi	r18, 0xF7	; 247
 51e:	22 83       	std	Z+2, r18	; 0x02
 520:	2f c0       	rjmp	.+94     	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_4:
		{
			if(Value)
 522:	44 23       	and	r20, r20
 524:	29 f0       	breq	.+10     	; 0x530 <MCAL_GPIO_WritePin+0x88>
				GPIOx->PORT.bits.PORT4 = GPIO_PIN_HIGH;
 526:	fc 01       	movw	r30, r24
 528:	22 81       	ldd	r18, Z+2	; 0x02
 52a:	20 61       	ori	r18, 0x10	; 16
 52c:	22 83       	std	Z+2, r18	; 0x02
 52e:	28 c0       	rjmp	.+80     	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT4 = GPIO_PIN_LOW;
 530:	fc 01       	movw	r30, r24
 532:	22 81       	ldd	r18, Z+2	; 0x02
 534:	2f 7e       	andi	r18, 0xEF	; 239
 536:	22 83       	std	Z+2, r18	; 0x02
 538:	23 c0       	rjmp	.+70     	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_5:
		{
			if(Value)
 53a:	44 23       	and	r20, r20
 53c:	29 f0       	breq	.+10     	; 0x548 <MCAL_GPIO_WritePin+0xa0>
				GPIOx->PORT.bits.PORT5 = GPIO_PIN_HIGH;
 53e:	fc 01       	movw	r30, r24
 540:	22 81       	ldd	r18, Z+2	; 0x02
 542:	20 62       	ori	r18, 0x20	; 32
 544:	22 83       	std	Z+2, r18	; 0x02
 546:	1c c0       	rjmp	.+56     	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT5 = GPIO_PIN_LOW;
 548:	fc 01       	movw	r30, r24
 54a:	22 81       	ldd	r18, Z+2	; 0x02
 54c:	2f 7d       	andi	r18, 0xDF	; 223
 54e:	22 83       	std	Z+2, r18	; 0x02
 550:	17 c0       	rjmp	.+46     	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_6:
		{
			if(Value)
 552:	44 23       	and	r20, r20
 554:	29 f0       	breq	.+10     	; 0x560 <MCAL_GPIO_WritePin+0xb8>
				GPIOx->PORT.bits.PORT6 = GPIO_PIN_HIGH;
 556:	fc 01       	movw	r30, r24
 558:	22 81       	ldd	r18, Z+2	; 0x02
 55a:	20 64       	ori	r18, 0x40	; 64
 55c:	22 83       	std	Z+2, r18	; 0x02
 55e:	10 c0       	rjmp	.+32     	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT6 = GPIO_PIN_LOW;
 560:	fc 01       	movw	r30, r24
 562:	22 81       	ldd	r18, Z+2	; 0x02
 564:	2f 7b       	andi	r18, 0xBF	; 191
 566:	22 83       	std	Z+2, r18	; 0x02
 568:	0b c0       	rjmp	.+22     	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_7:
		{
			if(Value)
 56a:	44 23       	and	r20, r20
 56c:	29 f0       	breq	.+10     	; 0x578 <MCAL_GPIO_WritePin+0xd0>
				GPIOx->PORT.bits.PORT7 = GPIO_PIN_HIGH;
 56e:	fc 01       	movw	r30, r24
 570:	22 81       	ldd	r18, Z+2	; 0x02
 572:	20 68       	ori	r18, 0x80	; 128
 574:	22 83       	std	Z+2, r18	; 0x02
 576:	04 c0       	rjmp	.+8      	; 0x580 <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT7 = GPIO_PIN_LOW;
 578:	fc 01       	movw	r30, r24
 57a:	22 81       	ldd	r18, Z+2	; 0x02
 57c:	2f 77       	andi	r18, 0x7F	; 127
 57e:	22 83       	std	Z+2, r18	; 0x02
			break;
		}
	}
}
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	08 95       	ret

00000586 <MCAL_SPI_Init>:
	{
		while (!(SPI->SPSR_.bits.SPIF_));
	}
	
	/* Start reception, Write data to SPI data register */
	*pRxBuffer = SPI->SPDR_;
 586:	fc 01       	movw	r30, r24
 588:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 58c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 590:	90 81       	ld	r25, Z
 592:	81 81       	ldd	r24, Z+1	; 0x01
 594:	89 2b       	or	r24, r25
 596:	80 64       	ori	r24, 0x40	; 64
 598:	92 81       	ldd	r25, Z+2	; 0x02
 59a:	89 2b       	or	r24, r25
 59c:	93 81       	ldd	r25, Z+3	; 0x03
 59e:	89 2b       	or	r24, r25
 5a0:	94 81       	ldd	r25, Z+4	; 0x04
 5a2:	89 2b       	or	r24, r25
 5a4:	95 81       	ldd	r25, Z+5	; 0x05
 5a6:	91 11       	cpse	r25, r1
 5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <MCAL_SPI_Init+0x2a>
 5aa:	96 81       	ldd	r25, Z+6	; 0x06
 5ac:	89 2b       	or	r24, r25
 5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <MCAL_SPI_Init+0x30>
 5b0:	96 81       	ldd	r25, Z+6	; 0x06
 5b2:	89 2b       	or	r24, r25
 5b4:	70 9a       	sbi	0x0e, 0	; 14
 5b6:	97 81       	ldd	r25, Z+7	; 0x07
 5b8:	99 23       	and	r25, r25
 5ba:	29 f0       	breq	.+10     	; 0x5c6 <MCAL_SPI_Init+0x40>
 5bc:	9f b7       	in	r25, 0x3f	; 63
 5be:	90 68       	ori	r25, 0x80	; 128
 5c0:	9f bf       	out	0x3f, r25	; 63
 5c2:	97 81       	ldd	r25, Z+7	; 0x07
 5c4:	89 2b       	or	r24, r25
 5c6:	8d b9       	out	0x0d, r24	; 13
 5c8:	08 95       	ret

000005ca <MCAL_SPI_GPIO_Set_Pins>:
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <MCAL_SPI_GPIO_Set_Pins+0x8>
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
 5d6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5da:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5de:	80 81       	ld	r24, Z
 5e0:	80 31       	cpi	r24, 0x10	; 16
 5e2:	51 f5       	brne	.+84     	; 0x638 <MCAL_SPI_GPIO_Set_Pins+0x6e>
 5e4:	87 e0       	ldi	r24, 0x07	; 7
 5e6:	89 83       	std	Y+1, r24	; 0x01
 5e8:	12 e0       	ldi	r17, 0x02	; 2
 5ea:	1a 83       	std	Y+2, r17	; 0x02
 5ec:	be 01       	movw	r22, r28
 5ee:	6f 5f       	subi	r22, 0xFF	; 255
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	86 e3       	ldi	r24, 0x36	; 54
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 9f 00 	call	0x13e	; 0x13e <MCAL_GPIO_Init>
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	89 83       	std	Y+1, r24	; 0x01
 5fe:	1a 82       	std	Y+2, r1	; 0x02
 600:	be 01       	movw	r22, r28
 602:	6f 5f       	subi	r22, 0xFF	; 255
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	86 e3       	ldi	r24, 0x36	; 54
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 9f 00 	call	0x13e	; 0x13e <MCAL_GPIO_Init>
 60e:	85 e0       	ldi	r24, 0x05	; 5
 610:	89 83       	std	Y+1, r24	; 0x01
 612:	1a 83       	std	Y+2, r17	; 0x02
 614:	be 01       	movw	r22, r28
 616:	6f 5f       	subi	r22, 0xFF	; 255
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	86 e3       	ldi	r24, 0x36	; 54
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 9f 00 	call	0x13e	; 0x13e <MCAL_GPIO_Init>
 622:	84 e0       	ldi	r24, 0x04	; 4
 624:	89 83       	std	Y+1, r24	; 0x01
 626:	1a 83       	std	Y+2, r17	; 0x02
 628:	be 01       	movw	r22, r28
 62a:	6f 5f       	subi	r22, 0xFF	; 255
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	86 e3       	ldi	r24, 0x36	; 54
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 9f 00 	call	0x13e	; 0x13e <MCAL_GPIO_Init>
 636:	29 c0       	rjmp	.+82     	; 0x68a <MCAL_SPI_GPIO_Set_Pins+0xc0>
 638:	87 e0       	ldi	r24, 0x07	; 7
 63a:	89 83       	std	Y+1, r24	; 0x01
 63c:	1a 82       	std	Y+2, r1	; 0x02
 63e:	be 01       	movw	r22, r28
 640:	6f 5f       	subi	r22, 0xFF	; 255
 642:	7f 4f       	sbci	r23, 0xFF	; 255
 644:	86 e3       	ldi	r24, 0x36	; 54
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 9f 00 	call	0x13e	; 0x13e <MCAL_GPIO_Init>
 64c:	86 e0       	ldi	r24, 0x06	; 6
 64e:	89 83       	std	Y+1, r24	; 0x01
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	8a 83       	std	Y+2, r24	; 0x02
 654:	be 01       	movw	r22, r28
 656:	6f 5f       	subi	r22, 0xFF	; 255
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	86 e3       	ldi	r24, 0x36	; 54
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 9f 00 	call	0x13e	; 0x13e <MCAL_GPIO_Init>
 662:	85 e0       	ldi	r24, 0x05	; 5
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	1a 82       	std	Y+2, r1	; 0x02
 668:	be 01       	movw	r22, r28
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	86 e3       	ldi	r24, 0x36	; 54
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 9f 00 	call	0x13e	; 0x13e <MCAL_GPIO_Init>
 676:	84 e0       	ldi	r24, 0x04	; 4
 678:	89 83       	std	Y+1, r24	; 0x01
 67a:	1a 82       	std	Y+2, r1	; 0x02
 67c:	be 01       	movw	r22, r28
 67e:	6f 5f       	subi	r22, 0xFF	; 255
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	86 e3       	ldi	r24, 0x36	; 54
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 9f 00 	call	0x13e	; 0x13e <MCAL_GPIO_Init>
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	1f 91       	pop	r17
 694:	08 95       	ret

00000696 <MCAL_SPI_TX_RX>:
 * Note 			- None
 */
void MCAL_SPI_TX_RX(uint8 *pTxBuffer, enum SPI_Polling_Mechanism Polling_En)
{
	/* Start transmission, Write data to SPI data register */
	SPI->SPDR_ = *pTxBuffer;
 696:	fc 01       	movw	r30, r24
 698:	20 81       	ld	r18, Z
 69a:	2f b9       	out	0x0f, r18	; 15
	
	/* Wait for transmission complete */
	if (Polling_En == SPI_enable)
 69c:	61 30       	cpi	r22, 0x01	; 1
 69e:	21 f4       	brne	.+8      	; 0x6a8 <MCAL_SPI_TX_RX+0x12>
	{
		while (!(SPI->SPSR_.bits.SPIF_));
 6a0:	77 9b       	sbis	0x0e, 7	; 14
 6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <MCAL_SPI_TX_RX+0xa>
	/* =================================================== */
	
	/* Wait for reception complete */
	if (Polling_En == SPI_enable)
	{
		while (!(SPI->SPSR_.bits.SPIF_));
 6a4:	77 9b       	sbis	0x0e, 7	; 14
 6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <MCAL_SPI_TX_RX+0xe>
	}
	
	/* Start reception, Write data to SPI data register */
	*pTxBuffer = SPI->SPDR_;
 6a8:	2f b1       	in	r18, 0x0f	; 15
 6aa:	fc 01       	movw	r30, r24
 6ac:	20 83       	st	Z, r18
 6ae:	08 95       	ret

000006b0 <__vector_12>:
/* ================================================================ */
/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

ISR(SPI_STC_vect)
{
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	2f 93       	push	r18
 6bc:	3f 93       	push	r19
 6be:	4f 93       	push	r20
 6c0:	5f 93       	push	r21
 6c2:	6f 93       	push	r22
 6c4:	7f 93       	push	r23
 6c6:	8f 93       	push	r24
 6c8:	9f 93       	push	r25
 6ca:	af 93       	push	r26
 6cc:	bf 93       	push	r27
 6ce:	ef 93       	push	r30
 6d0:	ff 93       	push	r31
	G_SPI_Config->P_IRQ_CallBack();
 6d2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6d6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6da:	00 84       	ldd	r0, Z+8	; 0x08
 6dc:	f1 85       	ldd	r31, Z+9	; 0x09
 6de:	e0 2d       	mov	r30, r0
 6e0:	09 95       	icall
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	bf 91       	pop	r27
 6e8:	af 91       	pop	r26
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	7f 91       	pop	r23
 6f0:	6f 91       	pop	r22
 6f2:	5f 91       	pop	r21
 6f4:	4f 91       	pop	r20
 6f6:	3f 91       	pop	r19
 6f8:	2f 91       	pop	r18
 6fa:	0f 90       	pop	r0
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	0f 90       	pop	r0
 700:	1f 90       	pop	r1
 702:	18 95       	reti

00000704 <MCAL_USART_Init>:
		else
		{
			pRxBuffer++;
		}
	}
}
 704:	fc 01       	movw	r30, r24
 706:	81 81       	ldd	r24, Z+1	; 0x01
 708:	89 b9       	out	0x09, r24	; 9
 70a:	59 98       	cbi	0x0b, 1	; 11
 70c:	82 81       	ldd	r24, Z+2	; 0x02
 70e:	82 30       	cpi	r24, 0x02	; 2
 710:	09 f1       	breq	.+66     	; 0x754 <MCAL_USART_Init+0x50>
 712:	28 f4       	brcc	.+10     	; 0x71e <MCAL_USART_Init+0x1a>
 714:	88 23       	and	r24, r24
 716:	41 f0       	breq	.+16     	; 0x728 <MCAL_USART_Init+0x24>
 718:	81 30       	cpi	r24, 0x01	; 1
 71a:	89 f0       	breq	.+34     	; 0x73e <MCAL_USART_Init+0x3a>
 71c:	3b c0       	rjmp	.+118    	; 0x794 <MCAL_USART_Init+0x90>
 71e:	83 30       	cpi	r24, 0x03	; 3
 720:	21 f1       	breq	.+72     	; 0x76a <MCAL_USART_Init+0x66>
 722:	84 30       	cpi	r24, 0x04	; 4
 724:	69 f1       	breq	.+90     	; 0x780 <MCAL_USART_Init+0x7c>
 726:	36 c0       	rjmp	.+108    	; 0x794 <MCAL_USART_Init+0x90>
 728:	80 b5       	in	r24, 0x20	; 32
 72a:	80 68       	ori	r24, 0x80	; 128
 72c:	80 bd       	out	0x20, r24	; 32
 72e:	80 b5       	in	r24, 0x20	; 32
 730:	8d 7f       	andi	r24, 0xFD	; 253
 732:	80 bd       	out	0x20, r24	; 32
 734:	80 b5       	in	r24, 0x20	; 32
 736:	8b 7f       	andi	r24, 0xFB	; 251
 738:	80 bd       	out	0x20, r24	; 32
 73a:	52 98       	cbi	0x0a, 2	; 10
 73c:	2b c0       	rjmp	.+86     	; 0x794 <MCAL_USART_Init+0x90>
 73e:	80 b5       	in	r24, 0x20	; 32
 740:	80 68       	ori	r24, 0x80	; 128
 742:	80 bd       	out	0x20, r24	; 32
 744:	80 b5       	in	r24, 0x20	; 32
 746:	82 60       	ori	r24, 0x02	; 2
 748:	80 bd       	out	0x20, r24	; 32
 74a:	80 b5       	in	r24, 0x20	; 32
 74c:	8b 7f       	andi	r24, 0xFB	; 251
 74e:	80 bd       	out	0x20, r24	; 32
 750:	52 98       	cbi	0x0a, 2	; 10
 752:	20 c0       	rjmp	.+64     	; 0x794 <MCAL_USART_Init+0x90>
 754:	80 b5       	in	r24, 0x20	; 32
 756:	80 68       	ori	r24, 0x80	; 128
 758:	80 bd       	out	0x20, r24	; 32
 75a:	80 b5       	in	r24, 0x20	; 32
 75c:	8d 7f       	andi	r24, 0xFD	; 253
 75e:	80 bd       	out	0x20, r24	; 32
 760:	80 b5       	in	r24, 0x20	; 32
 762:	84 60       	ori	r24, 0x04	; 4
 764:	80 bd       	out	0x20, r24	; 32
 766:	52 98       	cbi	0x0a, 2	; 10
 768:	15 c0       	rjmp	.+42     	; 0x794 <MCAL_USART_Init+0x90>
 76a:	80 b5       	in	r24, 0x20	; 32
 76c:	80 68       	ori	r24, 0x80	; 128
 76e:	80 bd       	out	0x20, r24	; 32
 770:	80 b5       	in	r24, 0x20	; 32
 772:	82 60       	ori	r24, 0x02	; 2
 774:	80 bd       	out	0x20, r24	; 32
 776:	80 b5       	in	r24, 0x20	; 32
 778:	84 60       	ori	r24, 0x04	; 4
 77a:	80 bd       	out	0x20, r24	; 32
 77c:	52 98       	cbi	0x0a, 2	; 10
 77e:	0a c0       	rjmp	.+20     	; 0x794 <MCAL_USART_Init+0x90>
 780:	80 b5       	in	r24, 0x20	; 32
 782:	80 68       	ori	r24, 0x80	; 128
 784:	80 bd       	out	0x20, r24	; 32
 786:	80 b5       	in	r24, 0x20	; 32
 788:	82 60       	ori	r24, 0x02	; 2
 78a:	80 bd       	out	0x20, r24	; 32
 78c:	80 b5       	in	r24, 0x20	; 32
 78e:	84 60       	ori	r24, 0x04	; 4
 790:	80 bd       	out	0x20, r24	; 32
 792:	52 9a       	sbi	0x0a, 2	; 10
 794:	83 81       	ldd	r24, Z+3	; 0x03
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	71 f0       	breq	.+28     	; 0x7b6 <MCAL_USART_Init+0xb2>
 79a:	18 f0       	brcs	.+6      	; 0x7a2 <MCAL_USART_Init+0x9e>
 79c:	82 30       	cpi	r24, 0x02	; 2
 79e:	a9 f0       	breq	.+42     	; 0x7ca <MCAL_USART_Init+0xc6>
 7a0:	1d c0       	rjmp	.+58     	; 0x7dc <MCAL_USART_Init+0xd8>
 7a2:	80 b5       	in	r24, 0x20	; 32
 7a4:	80 68       	ori	r24, 0x80	; 128
 7a6:	80 bd       	out	0x20, r24	; 32
 7a8:	80 b5       	in	r24, 0x20	; 32
 7aa:	8f 7e       	andi	r24, 0xEF	; 239
 7ac:	80 bd       	out	0x20, r24	; 32
 7ae:	80 b5       	in	r24, 0x20	; 32
 7b0:	8f 7d       	andi	r24, 0xDF	; 223
 7b2:	80 bd       	out	0x20, r24	; 32
 7b4:	13 c0       	rjmp	.+38     	; 0x7dc <MCAL_USART_Init+0xd8>
 7b6:	80 b5       	in	r24, 0x20	; 32
 7b8:	80 68       	ori	r24, 0x80	; 128
 7ba:	80 bd       	out	0x20, r24	; 32
 7bc:	80 b5       	in	r24, 0x20	; 32
 7be:	80 61       	ori	r24, 0x10	; 16
 7c0:	80 bd       	out	0x20, r24	; 32
 7c2:	80 b5       	in	r24, 0x20	; 32
 7c4:	80 62       	ori	r24, 0x20	; 32
 7c6:	80 bd       	out	0x20, r24	; 32
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <MCAL_USART_Init+0xd8>
 7ca:	80 b5       	in	r24, 0x20	; 32
 7cc:	80 68       	ori	r24, 0x80	; 128
 7ce:	80 bd       	out	0x20, r24	; 32
 7d0:	80 b5       	in	r24, 0x20	; 32
 7d2:	8f 7e       	andi	r24, 0xEF	; 239
 7d4:	80 bd       	out	0x20, r24	; 32
 7d6:	80 b5       	in	r24, 0x20	; 32
 7d8:	80 62       	ori	r24, 0x20	; 32
 7da:	80 bd       	out	0x20, r24	; 32
 7dc:	84 81       	ldd	r24, Z+4	; 0x04
 7de:	88 23       	and	r24, r24
 7e0:	19 f0       	breq	.+6      	; 0x7e8 <MCAL_USART_Init+0xe4>
 7e2:	81 30       	cpi	r24, 0x01	; 1
 7e4:	41 f0       	breq	.+16     	; 0x7f6 <MCAL_USART_Init+0xf2>
 7e6:	0d c0       	rjmp	.+26     	; 0x802 <MCAL_USART_Init+0xfe>
 7e8:	80 b5       	in	r24, 0x20	; 32
 7ea:	80 68       	ori	r24, 0x80	; 128
 7ec:	80 bd       	out	0x20, r24	; 32
 7ee:	80 b5       	in	r24, 0x20	; 32
 7f0:	87 7f       	andi	r24, 0xF7	; 247
 7f2:	80 bd       	out	0x20, r24	; 32
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <MCAL_USART_Init+0xfe>
 7f6:	80 b5       	in	r24, 0x20	; 32
 7f8:	80 68       	ori	r24, 0x80	; 128
 7fa:	80 bd       	out	0x20, r24	; 32
 7fc:	80 b5       	in	r24, 0x20	; 32
 7fe:	88 60       	ori	r24, 0x08	; 8
 800:	80 bd       	out	0x20, r24	; 32
 802:	80 81       	ld	r24, Z
 804:	88 23       	and	r24, r24
 806:	19 f0       	breq	.+6      	; 0x80e <MCAL_USART_Init+0x10a>
 808:	81 30       	cpi	r24, 0x01	; 1
 80a:	41 f0       	breq	.+16     	; 0x81c <MCAL_USART_Init+0x118>
 80c:	0d c0       	rjmp	.+26     	; 0x828 <MCAL_USART_Init+0x124>
 80e:	80 b5       	in	r24, 0x20	; 32
 810:	80 68       	ori	r24, 0x80	; 128
 812:	80 bd       	out	0x20, r24	; 32
 814:	80 b5       	in	r24, 0x20	; 32
 816:	8f 7b       	andi	r24, 0xBF	; 191
 818:	80 bd       	out	0x20, r24	; 32
 81a:	06 c0       	rjmp	.+12     	; 0x828 <MCAL_USART_Init+0x124>
 81c:	80 b5       	in	r24, 0x20	; 32
 81e:	80 68       	ori	r24, 0x80	; 128
 820:	80 bd       	out	0x20, r24	; 32
 822:	80 b5       	in	r24, 0x20	; 32
 824:	80 64       	ori	r24, 0x40	; 64
 826:	80 bd       	out	0x20, r24	; 32
 828:	85 81       	ldd	r24, Z+5	; 0x05
 82a:	81 30       	cpi	r24, 0x01	; 1
 82c:	81 f0       	breq	.+32     	; 0x84e <MCAL_USART_Init+0x14a>
 82e:	28 f0       	brcs	.+10     	; 0x83a <MCAL_USART_Init+0x136>
 830:	82 30       	cpi	r24, 0x02	; 2
 832:	c9 f0       	breq	.+50     	; 0x866 <__stack+0x7>
 834:	83 30       	cpi	r24, 0x03	; 3
 836:	19 f1       	breq	.+70     	; 0x87e <__stack+0x1f>
 838:	2d c0       	rjmp	.+90     	; 0x894 <__stack+0x35>
 83a:	57 98       	cbi	0x0a, 7	; 10
 83c:	56 98       	cbi	0x0a, 6	; 10
 83e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <GP_IRQ_CallBack+0x1>
 842:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <GP_IRQ_CallBack>
 846:	8f b7       	in	r24, 0x3f	; 63
 848:	8f 77       	andi	r24, 0x7F	; 127
 84a:	8f bf       	out	0x3f, r24	; 63
 84c:	23 c0       	rjmp	.+70     	; 0x894 <__stack+0x35>
 84e:	57 98       	cbi	0x0a, 7	; 10
 850:	56 9a       	sbi	0x0a, 6	; 10
 852:	86 81       	ldd	r24, Z+6	; 0x06
 854:	97 81       	ldd	r25, Z+7	; 0x07
 856:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <GP_IRQ_CallBack+0x1>
 85a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <GP_IRQ_CallBack>
 85e:	8f b7       	in	r24, 0x3f	; 63
 860:	80 68       	ori	r24, 0x80	; 128
 862:	8f bf       	out	0x3f, r24	; 63
 864:	17 c0       	rjmp	.+46     	; 0x894 <__stack+0x35>
 866:	57 9a       	sbi	0x0a, 7	; 10
 868:	56 98       	cbi	0x0a, 6	; 10
 86a:	86 81       	ldd	r24, Z+6	; 0x06
 86c:	97 81       	ldd	r25, Z+7	; 0x07
 86e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <GP_IRQ_CallBack+0x1>
 872:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <GP_IRQ_CallBack>
 876:	8f b7       	in	r24, 0x3f	; 63
 878:	80 68       	ori	r24, 0x80	; 128
 87a:	8f bf       	out	0x3f, r24	; 63
 87c:	0b c0       	rjmp	.+22     	; 0x894 <__stack+0x35>
 87e:	57 9a       	sbi	0x0a, 7	; 10
 880:	56 9a       	sbi	0x0a, 6	; 10
 882:	86 81       	ldd	r24, Z+6	; 0x06
 884:	97 81       	ldd	r25, Z+7	; 0x07
 886:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <GP_IRQ_CallBack+0x1>
 88a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <GP_IRQ_CallBack>
 88e:	8f b7       	in	r24, 0x3f	; 63
 890:	80 68       	ori	r24, 0x80	; 128
 892:	8f bf       	out	0x3f, r24	; 63
 894:	54 9a       	sbi	0x0a, 4	; 10
 896:	53 9a       	sbi	0x0a, 3	; 10
 898:	08 95       	ret

0000089a <MCAL_UART_SendData>:
 89a:	66 23       	and	r22, r22
 89c:	11 f0       	breq	.+4      	; 0x8a2 <MCAL_UART_SendData+0x8>
 89e:	5d 9b       	sbis	0x0b, 5	; 11
 8a0:	fe cf       	rjmp	.-4      	; 0x89e <MCAL_UART_SendData+0x4>
 8a2:	52 9b       	sbis	0x0a, 2	; 10
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <MCAL_UART_SendData+0x12>
 8a6:	50 98       	cbi	0x0a, 0	; 10
 8a8:	8c b9       	out	0x0c, r24	; 12
 8aa:	08 95       	ret
 8ac:	8c b9       	out	0x0c, r24	; 12
 8ae:	08 95       	ret

000008b0 <MCAL_UART_ReceiveData>:
 8b0:	88 23       	and	r24, r24
 8b2:	11 f0       	breq	.+4      	; 0x8b8 <MCAL_UART_ReceiveData+0x8>
 8b4:	5f 9b       	sbis	0x0b, 7	; 11
 8b6:	fe cf       	rjmp	.-4      	; 0x8b4 <MCAL_UART_ReceiveData+0x4>
 8b8:	52 9b       	sbis	0x0a, 2	; 10
 8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <MCAL_UART_ReceiveData+0x20>
 8bc:	8a b1       	in	r24, 0x0a	; 10
 8be:	9c b1       	in	r25, 0x0c	; 12
 8c0:	86 95       	lsr	r24
 8c2:	81 70       	andi	r24, 0x01	; 1
 8c4:	38 2f       	mov	r19, r24
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	a9 01       	movw	r20, r18
 8ca:	49 2b       	or	r20, r25
 8cc:	ca 01       	movw	r24, r20
 8ce:	08 95       	ret
 8d0:	8c b1       	in	r24, 0x0c	; 12
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	08 95       	ret

000008d6 <__vector_13>:

ISR(USART_RXC_vect)
{
 8d6:	1f 92       	push	r1
 8d8:	0f 92       	push	r0
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	0f 92       	push	r0
 8de:	11 24       	eor	r1, r1
 8e0:	2f 93       	push	r18
 8e2:	3f 93       	push	r19
 8e4:	4f 93       	push	r20
 8e6:	5f 93       	push	r21
 8e8:	6f 93       	push	r22
 8ea:	7f 93       	push	r23
 8ec:	8f 93       	push	r24
 8ee:	9f 93       	push	r25
 8f0:	af 93       	push	r26
 8f2:	bf 93       	push	r27
 8f4:	ef 93       	push	r30
 8f6:	ff 93       	push	r31
	GP_IRQ_CallBack();
 8f8:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <GP_IRQ_CallBack>
 8fc:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <GP_IRQ_CallBack+0x1>
 900:	09 95       	icall
}
 902:	ff 91       	pop	r31
 904:	ef 91       	pop	r30
 906:	bf 91       	pop	r27
 908:	af 91       	pop	r26
 90a:	9f 91       	pop	r25
 90c:	8f 91       	pop	r24
 90e:	7f 91       	pop	r23
 910:	6f 91       	pop	r22
 912:	5f 91       	pop	r21
 914:	4f 91       	pop	r20
 916:	3f 91       	pop	r19
 918:	2f 91       	pop	r18
 91a:	0f 90       	pop	r0
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	0f 90       	pop	r0
 920:	1f 90       	pop	r1
 922:	18 95       	reti

00000924 <__vector_15>:

ISR(USART_TXC_vect)
{
 924:	1f 92       	push	r1
 926:	0f 92       	push	r0
 928:	0f b6       	in	r0, 0x3f	; 63
 92a:	0f 92       	push	r0
 92c:	11 24       	eor	r1, r1
 92e:	2f 93       	push	r18
 930:	3f 93       	push	r19
 932:	4f 93       	push	r20
 934:	5f 93       	push	r21
 936:	6f 93       	push	r22
 938:	7f 93       	push	r23
 93a:	8f 93       	push	r24
 93c:	9f 93       	push	r25
 93e:	af 93       	push	r26
 940:	bf 93       	push	r27
 942:	ef 93       	push	r30
 944:	ff 93       	push	r31
	GP_IRQ_CallBack();
 946:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <GP_IRQ_CallBack>
 94a:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <GP_IRQ_CallBack+0x1>
 94e:	09 95       	icall
 950:	ff 91       	pop	r31
 952:	ef 91       	pop	r30
 954:	bf 91       	pop	r27
 956:	af 91       	pop	r26
 958:	9f 91       	pop	r25
 95a:	8f 91       	pop	r24
 95c:	7f 91       	pop	r23
 95e:	6f 91       	pop	r22
 960:	5f 91       	pop	r21
 962:	4f 91       	pop	r20
 964:	3f 91       	pop	r19
 966:	2f 91       	pop	r18
 968:	0f 90       	pop	r0
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	0f 90       	pop	r0
 96e:	1f 90       	pop	r1
 970:	18 95       	reti

00000972 <__tablejump2__>:
 972:	ee 0f       	add	r30, r30
 974:	ff 1f       	adc	r31, r31
 976:	05 90       	lpm	r0, Z+
 978:	f4 91       	lpm	r31, Z
 97a:	e0 2d       	mov	r30, r0
 97c:	09 94       	ijmp

0000097e <_exit>:
 97e:	f8 94       	cli

00000980 <__stop_program>:
 980:	ff cf       	rjmp	.-2      	; 0x980 <__stop_program>
